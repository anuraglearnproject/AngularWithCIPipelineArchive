# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:
  imageName: 'anuragreview/aipngtraining'  # Docker Hub username and app name
  imageTag: '$(Build.BuildId)'             # Use build ID as the image tag

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

- script: |
    cd aipngtraining
    npm install -g @angular/cli
    npm install
    npm run build --configuration=production
  displayName: 'npm install and build Angular application'

  #publish artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'aipngtraining/dist'
    ArtifactName: 'aipngtraining/dist'

#archive files
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/aipngtraining/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStageingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

# - task: DockerCompose@1
#   inputs:
#     containerregistrytype: 'Azure Container Registry'
#     azureContainerRegistry: '{"loginServer":"nganurag.azurecr.io", "id" : "/subscriptions/2a3c6418-97b9-4d96-a24b-2c2d7633d375/resourceGroups/rg-azuser2561_mml.local-c4Xy9/providers/Microsoft.ContainerRegistry/registries/nganurag"}'
#     dockerComposeFile: '**/docker-compose.yml'
#     action: 'Run a Docker Compose command'

# - task: Docker@2
#   inputs:
#     containerRegistry: 'dockerregistry_anuragreview_aipngtraining'  # The Docker registry service connection
#     repository: $(imageName)
#     command: 'buildAndPush'
#     dockerfile: '**/aipngtraining/Dockerfile'
#     tags: $(imageTag)

# # Step 2: Push the Docker image to Docker Hub
# - task: Docker@2
#   inputs:
#     containerRegistry: 'dockerregistry_anuragreview_aipngtraining'
#     repository: $(imageName)
#     command: 'push'
#     tags: $(imageTag)

#publish artifacts

# - task: AzureRmWebAppDeployment@4
#   inputs:
#     ConnectionType: 'AzureRM'
#     azureSubscription: 'angularwebappnganurag'
#     appType: 'webApp'
#     WebAppName: 'aipngapp'
#     packageForLinux: '$(System.DefaultWorkingDirectory)/aipngtraining/'

# - task: AzureWebApp@1
#   inputs:
#     azureSubscription: 'aip ng training'
#     appType: 'webApp'
#     appName: 'aipngapp'
#     package: '$(System.DefaultWorkingDirectory)/**/*.zip'
#     deploymentMethod: 'auto'
